#!/usr/bin/env node

/* eslint-disable no-console */
"use strict";

var _path = _interopRequireDefault(require("path"));

var _commander = _interopRequireDefault(require("commander"));

var _server = _interopRequireDefault(require("../server"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_commander.default.allowUnknownOption().option('-h, --host <host>', 'host to listen on', 'localhost').option('-p, --port <port>', 'port to listen on', 7007).option('-s, --secured', 'whether server is running on https').option('-c, --config-dir [dir-name]', 'storybook config directory').option('-e, --environment [environment]', 'DEVELOPMENT/PRODUCTION environment for webpack').option('-i, --manual-id', 'allow multiple users to work with same storybook').option('--smoke-test', 'Exit after successful start').parse(process.argv);

const projectDir = _path.default.resolve();

const configDir = _path.default.resolve(_commander.default.configDir || './storybook');

const listenAddr = [_commander.default.port];

if (_commander.default.host) {
  listenAddr.push(_commander.default.host);
}

const server = new _server.default({
  projectDir,
  configDir,
  environment: _commander.default.environment,
  manualId: _commander.default.manualId,
  secured: _commander.default.secured
});
server.listen(...listenAddr, err => {
  if (err) {
    throw err;
  }

  const address = `http://${_commander.default.host}:${_commander.default.port}/`;
  console.info(`\nReact Native Storybook started on => ${address}\n`);

  if (_commander.default.smokeTest) {
    process.exit(0);
  }
});