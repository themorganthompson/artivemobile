"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _express = _interopRequireDefault(require("express"));

var _querystring = _interopRequireDefault(require("querystring"));

var _http = _interopRequireDefault(require("http"));

var _ws = _interopRequireDefault(require("ws"));

var _middleware = _interopRequireDefault(require("./middleware"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Server {
  constructor(options) {
    this.options = options;
    this.httpServer = _http.default.createServer();
    this.expressApp = (0, _express.default)();
    this.expressApp.use((0, _middleware.default)(options));
    this.httpServer.on('request', this.expressApp);
    this.wsServer = new _ws.default.Server({
      server: this.httpServer
    });
    this.wsServer.on('connection', (s, req) => this.handleWS(s, req));
  }

  handleWS(socket, req) {
    if (this.options.manualId) {
      const params = req.url ? _querystring.default.parse(req.url.substr(1)) : {};

      if (params.pairedId) {
        socket.pairedId = params.pairedId; // eslint-disable-line
      }
    }

    socket.on('message', data => {
      this.wsServer.clients.forEach(c => {
        if (!this.options.manualId || socket.pairedId && socket.pairedId === c.pairedId) {
          c.send(data);
        }
      });
    });
  }

  listen(...args) {
    this.httpServer.listen(...args);
  }

}

exports.default = Server;