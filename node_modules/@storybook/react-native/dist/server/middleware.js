"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _express = require("express");

var _webpack = _interopRequireDefault(require("webpack"));

var _webpackDevMiddleware = _interopRequireDefault(require("webpack-dev-middleware"));

var _webpackHotMiddleware = _interopRequireDefault(require("webpack-hot-middleware"));

var _webpack2 = _interopRequireDefault(require("./config/webpack.config"));

var _webpackConfig = _interopRequireDefault(require("./config/webpack.config.prod"));

var _config = _interopRequireDefault(require("./config"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getMiddleware(configDir) {
  const middlewarePath = _path.default.resolve(configDir, 'middleware.js');

  if (_fs.default.existsSync(middlewarePath)) {
    let middlewareModule = require(middlewarePath); // eslint-disable-line


    if (middlewareModule.__esModule) {
      // eslint-disable-line
      middlewareModule = middlewareModule.default;
    }

    return middlewareModule;
  }

  return () => {};
}

function _default(options) {
  const {
    projectDir,
    configDir
  } = options; // Build the webpack configuration using the `baseConfig`
  // custom `.babelrc` file and `webpack.config.js` files

  const environment = options.environment || 'DEVELOPMENT';
  const isProd = environment === 'PRODUCTION';
  const currentWebpackConfig = isProd ? (0, _webpackConfig.default)(options) : (0, _webpack2.default)(options);
  const config = (0, _config.default)(environment, currentWebpackConfig, projectDir, configDir); // remove the leading '/'

  let {
    publicPath
  } = config.output;

  if (publicPath[0] === '/') {
    publicPath = publicPath.slice(1);
  }

  const compiler = (0, _webpack.default)(config);
  const devMiddlewareOptions = {
    noInfo: true,
    publicPath: config.output.publicPath,
    watchOptions: config.watchOptions || {}
  };
  const router = new _express.Router();
  const middlewareFn = getMiddleware(configDir);
  middlewareFn(router);
  router.use((0, _webpackDevMiddleware.default)(compiler, devMiddlewareOptions));

  if (!isProd) {
    router.use((0, _webpackHotMiddleware.default)(compiler));
  }

  router.get('/', (req, res) => {
    res.set('Content-Type', 'text/html');
    res.sendFile(_path.default.join(`${__dirname}/public/index.html`));
  });
  return router;
}