"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadEnv = loadEnv;
exports.nodeModulesPaths = exports.excludePaths = exports.includePaths = void 0;

var _path = _interopRequireDefault(require("path"));

var _lazyUniversalDotenv = require("lazy-universal-dotenv");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const includePaths = [_path.default.resolve('./')];
exports.includePaths = includePaths;
const excludePaths = [_path.default.resolve('./node_modules')];
exports.excludePaths = excludePaths;

const nodeModulesPaths = _path.default.resolve('./node_modules'); // Load environment variables starts with STORYBOOK_ to the client side.


exports.nodeModulesPaths = nodeModulesPaths;

function loadEnv(options = {}) {
  const defaultNodeEnv = options.production ? 'production' : 'development';
  const env = {
    NODE_ENV: JSON.stringify(process.env.NODE_ENV || defaultNodeEnv),
    // This is to support CRA's public folder feature.
    // In production we set this to dot(.) to allow the browser to access these assests
    // even when deployed inside a subpath. (like in GitHub pages)
    // In development this is just empty as we always serves from the root.
    PUBLIC_URL: JSON.stringify(options.production ? '.' : '')
  };
  const {
    stringified
  } = (0, _lazyUniversalDotenv.getEnvironment)();
  Object.keys(process.env).filter(name => /^STORYBOOK_/.test(name)).forEach(name => {
    env[name] = JSON.stringify(process.env[name]);
  });
  return {
    'process.env': Object.assign({}, env, stringified)
  };
}