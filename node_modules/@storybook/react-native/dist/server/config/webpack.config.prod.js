"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _path = _interopRequireDefault(require("path"));

var _webpack = _interopRequireDefault(require("webpack"));

var _dotenvWebpack = _interopRequireDefault(require("dotenv-webpack"));

var _htmlWebpackPlugin = _interopRequireDefault(require("html-webpack-plugin"));

var _template = require("@storybook/core/dist/server/utils/template");

var _package = require("../../../package.json");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const getConfig = options => {
  const environment = (0, _utils.loadEnv)({
    production: true
  });
  const entriesMeta = {
    manager: {
      headHtmlSnippet: (0, _template.getManagerHeadHtml)(options.configDir, process.env)
    }
  };
  const config = {
    mode: 'production',
    bail: true,
    devtool: '#cheap-module-source-map',
    entry: {
      manager: [_path.default.resolve(__dirname, '../../manager')]
    },
    output: {
      path: _path.default.join(__dirname, 'dist'),
      filename: 'static/[name].bundle.js',
      // Here we set the publicPath to ''.
      // This allows us to deploy storybook into subpaths like GitHub pages.
      // This works with css and image loaders too.
      // This is working for storybook since, we don't use pushState urls and
      // relative URLs works always.
      publicPath: '/'
    },
    plugins: [new _htmlWebpackPlugin.default({
      filename: `index.html`,
      chunksSortMode: 'none',
      alwaysWriteToDisk: true,
      inject: false,
      templateParameters: (compilation, files, o) => _objectSpread({
        compilation,
        files,
        options: o,
        version: _package.version
      }, entriesMeta.manager),
      template: require.resolve(`@storybook/core/src/server/templates/index.ejs`)
    }), new _webpack.default.DefinePlugin({
      storybookOptions: JSON.stringify(options)
    }), new _webpack.default.optimize.DedupePlugin(), new _webpack.default.DefinePlugin(environment), new _dotenvWebpack.default({
      silent: true
    })],
    module: {
      rules: [{
        test: /\.jsx?$/,
        loader: require.resolve('babel-loader'),
        query: require('./babel.prod.js'),
        // eslint-disable-line
        include: _utils.includePaths,
        exclude: _utils.excludePaths
      }, {
        test: /\.md$/,
        loader: require.resolve('raw-loader')
      }]
    }
  };
  return config;
};

var _default = getConfig;
exports.default = _default;